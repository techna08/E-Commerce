
const addBook = (req, res, connection) => {
  const { ISBN, title, Author, description, genre, price, quantity } = req.body;

  // Check for missing or malformed inputs
  if (!ISBN || !title || !Author || !description || !genre || !price || !quantity) {
    return res.status(400).json({ message: 'Missing or malformed input.' });
  }
   // Check for valid price value
   
   if (isNaN(price) || price <= 0 || price.toString().split(".")[1].length !== 2) {
     return res.status(400).json({ message: 'Invalid price value.' });
   }
  // Check if ISBN already exists in the system
  const query1 = 'SELECT * FROM book WHERE ISBN = ?';
  connection.query(query1, [ISBN], (error, results, fields) => {
    if (error) {
      console.log('Error occurred while checking data:', error);
      res.status(500).send('Error occurred while checking data');
    } else if (results.length > 0) {
      res.status(422).json({ message: 'This ISBN already exists in the system.' });
    } else {
     

      const query2 = 'INSERT INTO book (ISBN, title, Author, description, genre, price, quantity) VALUES (?, ?, ?, ?, ?, ?, ?)';
      const values = [ISBN, title, Author, description, genre, price, quantity];

      connection.query(query2, values, (error, results, fields) => {
        if (error) {
          console.log('Error occurred while inserting data:', error);
          res.status(500).send('Error occurred while inserting data');
        } else {
          console.log('Data inserted successfully:', results);

          const book = {
            ISBN,
            title,
            Author,
            description,
            genre,
            price,
            quantity
          };

          const baseUrl = req.protocol + '://' + req.get('host');
          const locationHeader = baseUrl + '/books/' + ISBN;

          res.status(201)
             .location(locationHeader)
             .json(book);
        }
      });
    }
  });
}

const updateBook = (req, res, connection) => {
  const updatedBook = req.body;
  const { ISBN, title, Author, description, genre, price, quantity } = req.body;

  // Check for missing or malformed inputs
  if (!ISBN || !title || !Author || !description || !genre || !price || !quantity) {
    return res.status(400).json({ message: 'Missing or malformed input.' });
  }
   // Check for valid price value
   
   if (isNaN(price) || price <= 0 || price.toString().split(".")[1].length !== 2) {
     return res.status(400).json({ message: 'Invalid price value.' });
   }
  const ISBNNew = req.params.ISBN;

  // Check if ISBN is provided in the request parameters
  if (!ISBNNew) {
    res.status(400).json({ error: "Missing ISBN parameter" });
    return;
  }

  
  // Update the book in the database
  connection.query(
    `UPDATE book SET title = ?, Author = ?, description = ?, genre = ?, price = ?, quantity = ? WHERE ISBN = ?`,
    [
      updatedBook.title,
      updatedBook.Author,
      updatedBook.description,
      updatedBook.genre,
      updatedBook.price,
      updatedBook.quantity,
      ISBNNew,
    ],
    (error, results, fields) => {
      if (error) {
        console.log(error)
        res.status(500).json({ error: "Unable to update book" });
      } else {
        // Check if the book was found and updated in the database
        if (results.affectedRows === 0) {
          res.status(404).json({ error: "ISBN not found" });
        } else {
          // Get the updated book from the database
          connection.query(
            `SELECT * FROM book WHERE ISBN = ?`,
            [ISBNNew],
            (error, results, fields) => {
              if (error) {
                res.status(500).json({ error: "Unable to get updated book" });
              } else {
                const updatedBook = results[0];
                res.status(200).json(updatedBook);
              }
            }
          );
        }
      }
    }
  );
};

const retrieveBook  = (req, res, connection) => {
  const ISBN = req.params.ISBN;

  // Check if ISBN is provided in the request parameters
  if (!ISBN) {
    res.status(400).json({ error: "Missing ISBN parameter" });
    return;
  }
    // Retrieve book from database using ISBN
    connection.query('SELECT * FROM book WHERE ISBN = ?', [ISBN], (error, results) => {
      if (error) {
        res.status(500).json({ error: error.message });
        return;
      }
  
      // Check if book exists in database
      if (results.length === 0) {
        res.status(404).json({ error: "Book not found" });
        return;
      }
  
      // Return book data
      const book = {
        ISBN: results[0].ISBN,
        title: results[0].title,
        Author: results[0].Author,
        description: results[0].description,
        genre: results[0].genre,
        price: results[0].price,
        quantity: results[0].quantity
      };
      res.status(200).json(book);
    });
}

module.exports = {
  addBook,
  updateBook,
  retrieveBook,
};